[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=7]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo1 : hint_color;
uniform vec4 albedo2 : hint_color;
uniform sampler2D noise;

uniform float alpha_scissor_threshold;
uniform float emission_energy = 1.0;
const vec2 noise_dir = vec2(0.5, 0.5);

void vertex() {
}

void circle() {
	
}


void fragment() {
	float sample = texture(noise, UV + 0.03 * TIME * noise_dir).r;
	float radius_noise = 0.17 * (0.5 + (sample - 1.0));
	float in_circle = float((UV.x-0.5) * (UV.x-0.5) + (UV.y-0.5)*(UV.y-0.5) < .24 + radius_noise);
	
	
    ALBEDO = mix(albedo1, albedo2, texture(noise, UV)).rgb;
//    vec3 emission_tex = texture(texture_emission,base_uv).rgb;
    EMISSION = emission_energy * normalize(mix(albedo1, albedo2, texture(noise, UV + 0.2 * sin(0.2 * TIME)))).rgb; //emission_energy * mix(color1, color2, clamp((0.2sin(3.0 TIME + 1.0)) + texture(noise, UV + 0.2 * sin(0.2 * TIME)), 0.2, 0.8)).rgb;
	
	ALPHA = in_circle;
	ALPHA_SCISSOR=alpha_scissor_threshold;
}
"

[sub_resource type="OpenSimplexNoise" id=9]

[sub_resource type="NoiseTexture" id=10]
noise = SubResource( 9 )

[resource]
shader = SubResource( 7 )
shader_param/albedo1 = Color( 0.913725, 0.243137, 0.0901961, 1 )
shader_param/albedo2 = Color( 0.419608, 0.231373, 0.352941, 1 )
shader_param/alpha_scissor_threshold = 0.98
shader_param/emission_energy = 1.0
shader_param/noise = SubResource( 10 )
