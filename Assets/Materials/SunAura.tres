[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=7]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode unshaded, async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo1 : hint_color;
uniform vec4 albedo2 : hint_color;
uniform sampler2D noise;

uniform float alpha_scissor_threshold;
uniform float emission_energy = 1.0;
//const vec2 noise_dir = vec2(0.5, 0.5);

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
    value = clamp(value, istart, istop);
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

float CalcMipLevel(vec2 uv)
{
  vec2 dx = dFdx(uv);
  vec2 dy = dFdy(uv);  // get the max squared magnitude of the change along x and y
  float delta_max_sqr = max(dot(dx, dx), dot(dy, dy));  // equivalent to log2(sqrt(delta_max_sqr))
  return max(0.0, 0.5 * log2(delta_max_sqr));
}

vec2 polar_coordinates_and_mip(vec2 uv, vec2 center, float zoom, float repeat) {
	// atan returns a value between -pi and pi
	// so we divide by pi * 2 to get -0.5 to 0.5
	vec2 dir = uv - center;
	float theta = length(dir) * 2.0;
	float phi = atan(dir.y, dir.x) / (3.141 * 2.0);// 0.0 to 1.0 range
	float phi_frac = fract(phi);

	// so we flip the y to align with Unity's OpenGL style
	// texture UVs so 0.0 is at the bottom
//	float theta = acos(-normal.y) / UNITY_PI;// construct the primary uv
	vec2 uvA = vec2(phi, theta);// construct the secondary uv using phi_frac
	vec2 uvB = vec2(phi_frac, theta);// get the min mip level of either uv sets
	// _TextureName_TexelSize.zw is the texture resolution

	
	
	return vec2(uvA);
}

vec2 polar_coordinates(vec2 uv, vec2 center, float zoom, float repeat)
{
	vec2 dir = uv - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) * 1.0/(3.1416 * 2.0);
	return mod(vec2(radius * zoom, angle * repeat), 1.0);
}

void fragment() {
	vec2 noise_dir = vec2(.5, (0.5 + 0.5 * sin(0.25 * TIME)) * .005);
	// FML this auto mip still doesn't work so back to the ugly seam
	vec2 polar_uv = polar_coordinates(UV.xy, vec2(0.5), 0.3, 1.0);
	vec2 polar_t = -1.8 * polar_uv.xy + 0.06 * TIME * noise_dir;
//	vec2 polar_t_fract = polar_t;
//	polar_t_fract.x = fract(polar_t_fract.x);
	
//	float mipLevel = min(
//	  CalcMipLevel(polar_t * vec2(textureSize(noise, 1))),
//	  CalcMipLevel(polar_t_fract * vec2(textureSize(noise, 1)))
//	);
	
	
//	float mip_level = polar_uv.z;
//	vec2 polar_uv = polar_uv_and_mip.xy;
//	float in_problem = 1.0 + (float(polar_uv.y > -0.01) + float(polar_uv.y < -0.99)) * 5.0;
//	float dist_to_problem = float(polar_uv.y > 0.5) * (1.0 - polar_uv.y) + float(polar_uv.y <= 0.5) * polar_uv.y;
//	polar_uv.y = in_problem * (-0.01) + (1.0-in_problem) * polar_uv.y;

	float sample = texture(noise, polar_t).r;
	float radius_noise = 0.17 * (0.5 + (sample - 1.0));
	float in_circle = float((UV.x-0.5) * (UV.x-0.5) + (UV.y-0.5)*(UV.y-0.5) - .24 + radius_noise);


    ALBEDO = mix(albedo1, albedo2, texture(noise, UV)).rgb;
    EMISSION = emission_energy * ALBEDO.rgb;
	
	float circle_alpha = pow(clamp_and_map(in_circle, -0.25, .0, 1.0, 0.0), 2);
	ALPHA = 2.0 * circle_alpha;// * in_problem;
}
"

[sub_resource type="OpenSimplexNoise" id=9]
period = 13.9
persistence = 0.438

[sub_resource type="NoiseTexture" id=10]
seamless = true
noise = SubResource( 9 )

[resource]
shader = SubResource( 7 )
shader_param/albedo1 = Color( 0.501961, 0.223529, 0.101961, 1 )
shader_param/albedo2 = Color( 0.686275, 0.517647, 0.0627451, 1 )
shader_param/alpha_scissor_threshold = 0.98
shader_param/emission_energy = 2.8
shader_param/noise = SubResource( 10 )
