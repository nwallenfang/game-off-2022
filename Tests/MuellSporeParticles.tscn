[gd_scene load_steps=12 format=2]

[ext_resource path="res://Assets/Textures/spore_mask.png" type="Texture" id=1]

[sub_resource type="Gradient" id=12]
offsets = PoolRealArray( 0, 0.120755, 0.74717, 1 )
colors = PoolColorArray( 0.592157, 0.0980392, 0.776471, 0, 0.596078, 0.109804, 0.784314, 1, 0.605256, 0.281536, 0.853851, 1, 0.611765, 0.364706, 0.886275, 0 )

[sub_resource type="GradientTexture" id=2]
gradient = SubResource( 12 )

[sub_resource type="Curve" id=13]
min_value = -200.0
max_value = 200.0
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=11]
curve = SubResource( 13 )

[sub_resource type="Curve" id=14]
_data = [ Vector2( 0, 0.0352273 ), 0.0, 0.0, 0, 0, Vector2( 0.170139, 0.626136 ), 0.0, 0.0, 0, 0, Vector2( 0.520833, 0.8 ), 0.0, 0.0, 0, 0, Vector2( 0.986111, 0.498864 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=7]
curve = SubResource( 14 )

[sub_resource type="ParticlesMaterial" id=15]
emission_shape = 1
emission_sphere_radius = 3.0
spread = 180.0
gravity = Vector3( 0, 0, 0 )
linear_accel = 0.05
linear_accel_random = 1.0
radial_accel_curve = SubResource( 11 )
angle = 30.0
angle_random = 1.0
scale_curve = SubResource( 7 )
color_ramp = SubResource( 2 )
hue_variation = 0.05
hue_variation_random = 0.77

[sub_resource type="Shader" id=16]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D alpha_mask;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = COLOR.a * texture(alpha_mask, base_uv).x;
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 16 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/particles_anim_h_frames = 1
shader_param/particles_anim_v_frames = 1
shader_param/particles_anim_loop = false
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/alpha_mask = ExtResource( 1 )

[sub_resource type="QuadMesh" id=17]
material = SubResource( 9 )

[node name="Spatial" type="Spatial"]

[node name="Particles" type="Particles" parent="."]
transform = Transform( 3.02046, 0, 0, 0, 3.94673, 0, 0, 0, 4.46399, 0, 0, 0 )
visible = false
amount = 64
lifetime = 80.0
speed_scale = 1.2
visibility_aabb = AABB( -6.03231, -4, -4, 12.0646, 8, 8 )
process_material = SubResource( 15 )
draw_pass_1 = SubResource( 17 )
