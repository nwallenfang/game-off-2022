[gd_scene load_steps=7 format=2]

[ext_resource path="res://Assets/Sprites/sun.png" type="Texture" id=1]
[ext_resource path="res://Tests/BillboardTest.gd" type="Script" id=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="QuadMesh" id=2]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode unshaded, async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying vec3 world_pos;


// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}


float get_mat_dist(mat4 a, mat4 b) {
	float sum = 0.0;
	sum += distance(a[0], b[0]);
	sum += distance(a[1], b[1]);
	sum += distance(a[2], b[2]);
	sum += distance(a[3], b[3]);
	return sum;
}

mat3 get_rot_between(vec4 _a, vec4 _b) {
	vec3 a = normalize(_a.xyz);
	vec3 b = normalize(_b.xyz);
	a.y *= -1.0;
	b.y *= -1.0;
	vec3 v = cross(-a, b);
	mat3 vv = mat3(vec3(0.0, -v.z, v.y), vec3(v.z, 0.0, -v.x), vec3(-v.y, v.x, 0.0));
	float c = dot(a, b);
	return mat3(1.0) + vv + ((1.0 - c) / (length(v) * length(v))) * vv * vv;
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
//
//	mat4 old_modelview = MODELVIEW_MATRIX;
//
//	mat4 puzzle = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2], WORLD_MATRIX[3]);
//	mat4 unity = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
//	mat4 test = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(-0.0, 0.0, -2.0, 1.0));
//
//	mat4 maybe = mat4(get_rot_between(CAMERA_MATRIX * vec4(0.0, 0.0, -1.0, 0.0), CAMERA_MATRIX * WORLD_MATRIX[3] * -1.0));
//	maybe[3] = puzzle[3];
//	maybe[0][3] = 0.0;
//	maybe[1][3] = 0.0;
//	maybe[2][3] = 0.0;
//
//	MODELVIEW_MATRIX = maybe;
//
//	vec4 aa = vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0);
//	vec4 bb = vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0);
//	vec4 cc = vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0);
//	vec4 dd = vec4(0.0, 0.0, 0.0, 1.0);
//	mat4 scale_mat = mat4(aa, bb, cc, dd);
//	MODELVIEW_MATRIX = MODELVIEW_MATRIX * scale_mat;
	
	world_pos = (CAMERA_MATRIX * vec4(VERTEX, 0.0)).xyz;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	
	vec2 centered_uv = UV - vec2(.5) * 2.0;
	
	//ALBEDO = albedo.rgb * snoise(world_pos * 10.0 + TIME * .0 *vec3(1.0));
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )

[node name="BillboardTest" type="Spatial"]
script = ExtResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 0.239325, 0, 0, 0, 0.239325, 0, 0, 0, 0.239325, 0, 0, 0 )
visible = false
mesh = SubResource( 1 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 2.12595, 0, 0, 0, -9.29282e-08, 2.12595, 0, -2.12595, -9.29282e-08, 0, 0, 0 )
mesh = SubResource( 2 )
material/0 = SubResource( 4 )
