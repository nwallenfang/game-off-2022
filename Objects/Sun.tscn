[gd_scene load_steps=14 format=2]

[ext_resource path="res://Effects/SunAura.tscn" type="PackedScene" id=1]
[ext_resource path="res://Objects/Sun.gd" type="Script" id=2]
[ext_resource path="res://Assets/Sound/sun.ogg" type="AudioStream" id=3]
[ext_resource path="res://Assets/Textures/sun.jpg" type="Texture" id=4]

[sub_resource type="SphereMesh" id=2]
radial_segments = 36
rings = 24

[sub_resource type="Shader" id=3]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode unshaded, async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
//uniform vec4 albedo : hint_color;
//uniform float specular;
//uniform float metallic;
//uniform float roughness : hint_range(0,1);
//uniform float point_size : hint_range(0,128);
//uniform sampler2D texture_emission : hint_black_albedo;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
//uniform vec3 uv2_scale;
//uniform vec3 uv2_offset;
uniform sampler2D noise;
uniform float value;

uniform vec4 color1: hint_color;
uniform vec4 color2: hint_color;
uniform vec4 asshole_color: hint_color;

uniform float time_noise_speed = 0.01;


varying vec3 uv1_triplanar_pos;
varying vec3 vert_normal;
void vertex() {
//	vec4 invcamx = INV_CAMERA_MATRIX.x;
//	vec4 invcamy = INV_CAMERA_MATRIX.y;
//	vec4 invcamz = INV_CAMERA_MATRIX.z;
//	vec4 invcamw = INV_CAMERA_MATRIX.w;

//	mat3 invcam = mat3(invcamx.xyz, invcamy.xyz, invcamz.xyz);
	vert_normal = (INV_CAMERA_MATRIX * vec4(NORMAL, .01)).xyz;
}


// from https://answers.unity.com/questions/755222/how-do-i-fix-texture-seam-from-uv-spherical-mappin.html
vec2 normal_to_radial(vec3 normal) {
	vec3 normalized = normalize(normal);
	float longitude = atan(normalized.z, normalized.x);
	float latitude = acos(normalized.y);
	vec2 sphere_coords = vec2(longitude, latitude) * (1.0/3.1415);
	
	return vec2(sphere_coords.x * 0.5 + 0.5, 1.0 - sphere_coords.y);
}
	
float clamp_and_map(float _value, float istart, float istop, float ostart, float ostop) {
    _value = clamp(_value, istart, istop);
    return ostart + (ostop - ostart) * ((_value - istart) / (istop - istart));
}

void fragment() {
	vec2 radial_coords = normal_to_radial(vert_normal);
	radial_coords.x = 1.0 - radial_coords.x;
//	vec4 noise_time = texture(noise, vec2(0.01 * TIME));
	vec4 time_noise_sample = texture(noise, UV + (0.03 * TIME * vec2(0.5, 0.5)));
    ALBEDO = smoothstep(color1, color2, time_noise_sample).rgb;
	ALBEDO = mix(ALBEDO, asshole_color.rgb, clamp_and_map(.5 - abs(UV.y-.5), 0.05, .18, 1.0, 0.0));
    EMISSION = emission_energy * ALBEDO; //normalize(smoothstep(color1, color2, texture(noise, UV + 0.2 * sin(0.2 * TIME)))).rgb; //emission_energy * mix(color1, color2, clamp((0.2sin(3.0 TIME + 1.0)) + texture(noise, UV + 0.2 * sin(0.2 * TIME)), 0.2, 0.8)).rgb;
}"

[sub_resource type="OpenSimplexNoise" id=5]
seed = 3
octaves = 4
period = 20.0
persistence = 0.432

[sub_resource type="NoiseTexture" id=6]
width = 1024
height = 1024
seamless = true
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/emission_energy = 1.5
shader_param/uv1_scale = null
shader_param/uv1_offset = null
shader_param/value = 1.791
shader_param/color1 = Color( 0.556863, 0.556863, 0.47451, 1 )
shader_param/color2 = Color( 0.596078, 0.87451, 0.364706, 1 )
shader_param/asshole_color = Color( 0.956863, 0.721569, 0.0901961, 1 )
shader_param/time_noise_speed = 0.01
shader_param/noise = SubResource( 6 )

[sub_resource type="OccluderShapeSphere" id=7]
spheres = [ Plane( 0, 0, 0, 16.9765 ) ]

[sub_resource type="Shader" id=8]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 4 )

[sub_resource type="SphereMesh" id=10]
material = SubResource( 9 )

[node name="Sun" type="Spatial"]
script = ExtResource( 2 )

[node name="SunMesh" type="MeshInstance" parent="."]
transform = Transform( 17.2859, 0, 0, 0, 17.2859, 0, 0, 0, 17.2859, 0, 0, 0 )
layers = 2
cast_shadow = 0
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="SunAura" parent="." instance=ExtResource( 1 )]
transform = Transform( 1.07621, 0, 0, 0, -4.70426e-08, -1.07621, 0, 1.07621, -4.70426e-08, 0, 0, 0 )

[node name="Occluder" type="Occluder" parent="."]
shape = SubResource( 7 )

[node name="Audio3D" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 3 )
unit_db = -80.0
unit_size = 20.0
max_db = 5.0
bus = "SFX"

[node name="Tween" type="Tween" parent="."]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 22.6, 0 )
visible = false
mesh = SubResource( 10 )
